fit1 <- lm(Rings~Height, data=abalone)
fit2 <- lm(log(Rings)~Height, data=abalone)
plot(fit1)
plot(fit2)
abalone.clean <- subset(abalone, Height<0.4 & Height!=0))
abalone.clean <- subset(abalone, Height<0.4 & Height!=0)
fit1 <- lm(Rings~Height, data=abalone.clean)
fit2 <- lm(log(Rings)~Height, data=abalone.clean)
par(mfrow=c(2,2))
plot(fit1)
plot(fit2)
summary(fit1)
summary(fit2)
data()
head(co2)
ToothGrowth
tg <- ToothGrowth
boxplot(tg$len~tg$supp)
boxplot(tg$len~tg$supp, tg$dose~tg$supp)
boxplot(len~supp, data=tg)
boxplot(len+dose~supp, data=tg)
boxplot(c(len,dose)~supp, data=tg)
boxplot(cbind(len,dose)~supp, data=tg)
boxplot(len~supp, data=tg)
boxplot(dose~supp, add = TRUE, data=tg)
##Some data
a = rnorm(20)
b = rnorm(20, 2, 0.3)
##The plots
boxplot(a)
boxplot(b, add=TRUE, col=2)
boxplot(len~supp, data=tg, ylim = c(0,10))
boxplot(len~supp, data=tg, ylim = c(0,30))
boxplot(len~supp, data=tg, ylim = c(0,100))
boxplot(dose~supp, add = TRUE, data=tg)
boxplot(len~supp, data=tg, xlim = c(0.5, 4.5))
boxplot(dose~supp, data=tg, at = c(2.5,3.5), add = TRUE)
boxplot(len~supp, data=tg, xlim = c(0.5, 4.5), ylim = c(0,35))
boxplot(dose~supp, data=tg, at = c(2.5,3.5), add = TRUE)
boxplot(len~supp, data=tg, xlim = c(0.5, 4.5), ylim = c(0,35))
boxplot(dose~supp, data=tg, at = c(3,4), add = TRUE)
boxplot(len~supp, data=tg, xlim = c(0.5, 4.5), ylim = c(0,35))
boxplot(dose~supp, data=tg, at = c(3,4), add = TRUE)
log(0.2)
log(2)
set.seed(613)
n <- 100
rank <- rbinom(n, size = 1, prob = 0.5)
gpa <- round(runif(n, min = 2, max = 4), 2)
gre <- round(runif(n, min = 130, max = 170))
b0 <- -1.7
b.rank <- 0.7
b.gpa <- 0.3
b.gre <- 0.01
logit.p <- b0 + b.rank*rank + b.gpa*gpa + b.gre*gre
p <- exp(logit.p)/(1+exp(logit.p))
summary(p)
set.seed(613)
n <- 100
rank <- rbinom(n, size = 1, prob = 0.5)
gpa <- round(runif(n, min = 2.5, max = 4), 2)
gre <- round(runif(n, min = 130, max = 170))
b0 <- -1.7
b.rank <- 0.7
b.gpa <- 0.3
b.gre <- 0.01
logit.p <- b0 + b.rank*rank + b.gpa*gpa + b.gre*gre
p <- exp(logit.p)/(1+exp(logit.p))
admit <- rbinom(n, size = 1, prob = p)
summary(admit)
summary(p)
exp(-2)
set.seed(613)
n <- 100
rank <- rbinom(n, size = 1, prob = 0.5)
gpa <- round(runif(n, min = 2.5, max = 4), 2)
gre <- round(runif(n, min = 130, max = 170))
b0 <- -2
b.rank <- 0.7
b.gpa <- 0.3
b.gre <- 0.01
logit.p <- b0 + b.rank*rank + b.gpa*gpa + b.gre*gre
p <- exp(logit.p)/(1+exp(logit.p))
admit <- rbinom(n, size = 1, prob = p)
summary(p)
set.seed(613)
n <- 100
rank <- rbinom(n, size = 1, prob = 0.5)
gpa <- round(runif(n, min = 2.5, max = 4), 2)
gre <- round(runif(n, min = 130, max = 170))
b0 <- -2.5
b.rank <- 0.7
b.gpa <- 0.3
b.gre <- 0.01
logit.p <- b0 + b.rank*rank + b.gpa*gpa + b.gre*gre
p <- exp(logit.p)/(1+exp(logit.p))
admit <- rbinom(n, size = 1, prob = p)
summary(p)
set.seed(613)
n <- 100
rank <- rbinom(n, size = 1, prob = 0.5)
gpa <- round(runif(n, min = 2.5, max = 4), 2)
gre <- round(runif(n, min = 130, max = 170))
b0 <- -3
b.rank <- 0.7
b.gpa <- 0.3
b.gre <- 0.01
logit.p <- b0 + b.rank*rank + b.gpa*gpa + b.gre*gre
p <- exp(logit.p)/(1+exp(logit.p))
admit <- rbinom(n, size = 1, prob = p)
summary(p)
exp(0.7)
rank <- c(rep(0,5), rep(1,5))
gpa <- round(c(sort(rnorm(n = 5, mean = 3.3, sd = 0.1)), sort(rnorm(n = 5, mean = 3.2, sd = 0.1))),2)
gpa
gpa <- round(c(sort(rnorm(n = 5, mean = 3.3, sd = 0.15)), sort(rnorm(n = 5, mean = 3.2, sd = 0.15))),2)
gpa
rank <- c(rep(0,5), rep(1,5))
gpa <- round(c(sort(rnorm(n = 5, mean = 3.3, sd = 0.2)), sort(rnorm(n = 5, mean = 3.2, sd = 0.2))),2)
gpa
gpa <- round(c(sort(rnorm(n = 5, mean = 3.3, sd = 0.3)), sort(rnorm(n = 5, mean = 3.2, sd = 0.3))),2)
gpa
set.seed(613)
n <- 100
pollution <- rep(0:1, n/2)
population <- round(rnorm(n, mean = 100, sd = 10))
lambda <- (0.05 + 0.1 * pollution) * population
cases <- rpois(n, lambda = lambda)
ds <- data.frame(pollution, population, cases)
head(ds)
fit4 <- glm(cases~pollution, family = poisson(link = "log"),data = ds); summary(fit4)
fit5 <- glm(cases~pollution+offset(population), family = poisson(), data = ds); fit5
set.seed(613)
n <- 100
pollution <- rep(0:1, n/2)
population <- round(rnorm(n, mean = 100, sd = 10))
lambda <- (0.05 + 0.2 * pollution) * population
cases <- rpois(n, lambda = lambda)
ds <- data.frame(pollution, population, cases)
head(ds)
fit4 <- glm(cases~pollution, family = poisson(link = "log"),data = ds); summary(fit4)
fit5 <- glm(cases~pollution+offset(population), family = poisson(), data = ds); fit5
set.seed(613)
n <- 100
pollution <- rep(0:1, n/2)
population <- round(rnorm(n, mean = 10, sd = 1))
lambda <- (0.05 + 0.2 * pollution) * population
cases <- rpois(n, lambda = lambda)
ds <- data.frame(pollution, population, cases)
head(ds)
fit4 <- glm(cases~pollution, family = poisson(link = "log"),data = ds); summary(fit4)
fit5 <- glm(cases~pollution+offset(population), family = poisson(), data = ds); fit5
exp(0.1)
set.seed(613)
n <- 100
pollution <- rep(0:1, n/2)
population <- round(rnorm(n, mean = 10, sd = 1))
lambda <- (0.05 + 0.2 * pollution) * population
cases <- rpois(n, lambda = lambda)
ds <- data.frame(pollution, population, cases)
head(ds)
fit4 <- glm(cases~pollution, family = poisson(link = "log"),data = ds); summary(fit4)
fit5 <- glm(cases~pollution+offset(population), family = poisson(), data = ds); fit5
exp(1.7)
set.seed(613)
n <- 100
pollution <- rep(0:1, n/2)
population <- round(rnorm(n, mean = 10, sd = 1))
lambda <- (0.05 + 0.1 * pollution) * population
cases <- rpois(n, lambda = lambda)
ds <- data.frame(pollution, population, cases)
head(ds)
fit4 <- glm(cases~pollution, family = poisson(link = "log"),data = ds); summary(fit4)
fit5 <- glm(cases~pollution+offset(population), family = poisson(), data = ds); fit5
library("nlme", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
head(BodyWeight)
str(BodyWeight)
data("BodyWeight")
BodyWeight
class(BodyWeight)
library("mosaic", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
xqgamma(0.5, shape=0.1, rate=0.5)
xqgamma(0.5, shape=10, rate=0.5)
detach("package:mosaic", unload=TRUE)
detach("package:mosaicData", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:ggformula", unload=TRUE)
detach("package:lattice", unload=TRUE)
library("survival", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
bladder1
data(lung)
lung <- lung
View(lung)
Surv(time = lung$time, event = lung$status)
head(kidney)
Surv(time = kidney$time, event = kidney$status)
cancer
colon
heart
lung
head(lung)
library("survival", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
sample(1:5, size=1)
sample(1:5, size=1)
shiny::runApp('Desktop/PhD3/MockExam/Mock_exam/Rent')
runApp('Desktop/PhD3/MockExam/Mock_exam/Rent')
runApp('Desktop/PhD3/MockExam/Mock_exam/Rent')
runApp('Desktop/PhD3/MockExam/Mock_exam/Rent')
runApp('Desktop/PhD3/MockExam/Mock_exam/Rent')
# Chunk 1: fac1
library(car)  #Need to install this library first
data(Moore)   #See help(Moore)
str(Moore)
# Chunk 2: fac2
table(Moore$partner.status,Moore$fcategory)
par(mar=c(4,2,2,0))
boxplot(fscore ~ partner.status * fcategory, data=Moore,
ylab="fscore", main="Boxplots of fscore",col=rep(c('red','blue'),3))
# Chunk 3: fac3
fit1.only<-lm(fscore~partner.status,data=Moore);
summary(fit1.only)
# Chunk 4: fac4
fit2.only<-lm(fscore~fcategory,data=Moore);summary(fit2.only)
# Chunk 5: fac5
Moore2 <- within(Moore,  fcategory<- relevel(fcategory, ref = 'low'))
fit2.only2<-lm(fscore~fcategory,data=Moore2);summary(fit2.only2)
# Chunk 6: fac6
fit3.add<-lm(fscore~partner.status+fcategory,data=Moore);summary(fit3.add)
# Chunk 7: fac7
library(lsmeans)   #Make sure this package is loaded
lsmeans(fit3.add, ~ partner.status * fcategory)
Moore.fit<-Moore;Moore.fit$fit<-fitted(fit3.add)
aggregate(fit~partner.status+fcategory,data=Moore.fit,mean)    #Check
# Chunk 8: fac8
anova(fit3.add)
# Chunk 9: fac9
par(mar=c(4,4,2,4))
stripchart(residuals(fit3.add)~partner.status+fcategory,data=Moore,
pch=19,cex=0.8,ylim=range(-15,15),vertical=TRUE)
abline(h=0,lty=2)
# Chunk 10: fac10
fit4.add<-lm(fscore~partner.status*fcategory,data=Moore);summary(fit4.add)
# Chunk 11: fac11
lsmeans(fit4.add, ~ partner.status * fcategory)
# Chunk 12: fac12
anova(fit4.add)
# Chunk 13: fac13
par(mar=c(4,4,2,4))
stripchart(residuals(fit4.add)~partner.status+fcategory,data=Moore,
pch=19,cex=0.8,ylim=range(-15,15),vertical=TRUE)
abline(h=0,lty=2)
library("mosaic", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
xpbeta(q=c(0.025,0.975))
xpbeta(q=c(0.025,0.975), shape1=0.1, shape2=0.1)
xpbeta(q=c(0.025,0.975), shape1=0.1, shape2=0.05)
xpbeta(q=c(0.025,0.975), shape1=0.5, shape2=0.5)
xpbeta(q=c(0.025,0.975), shape1=0.5, shape2=0.5, verbose = T)
xpbeta(q=c(0.025,0.975), shape1=0.5, shape2=0.5)
optim
mbc
install.packages("eha")
library("eha", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("mice")
library("mice", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:mice", unload=TRUE)
library("mice", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
as.Date(2019-08-05)
as.Date("2019-08-05")
as.Date("2019-08-05") - as.Date("1995-02-28")
"2019-08-05"
as.numeric("2019-08-05")
install.packages("Rcpp")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
vignette("Rcpp-introduction")
evalCpp("1+1")
evalCpp("1+2")
x <- 2L
x
class(x)
x <- 2
class(x)
is.double(x)
is.real(x)
bool isOddCpp(int num = 10) {
bool result = (num % 2 == 1);
return result;
}
timesTwo(42)
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
install.packages("microbenchmark")
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
evalCpp("R::rnorm(3")
evalCpp("R::rnorm(3)")
evalCpp("R::rnorm(1)")
evalCpp("R::rnorm(0,1)")
evalCpp("Rcpp::rnorm(0,1,3)")
evalCpp("Rcpp::rnorm(3,0,1)")
evalCpp("R::rnorm(3,0,1)")
install.packages("RcppArmadillo")
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
library("RcppArmadillo", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
K %*% param
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/BFGS_GD.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/BFGS_GD.cpp')
maxit = 1e6L
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/BFGS_GD.cpp')
K%*%z
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/BFGS_GD.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/BFGS_GD.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
r <- bfgs_gd(K, param)
r
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
r$n
class(r$n)
is.integer(r$n)
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
r$n
is.integer(r$n)
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/BFGS_GD.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/BFGS_GD.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/BFGS_GD.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Project/KernelTweedie/Rcpp/test.cpp')
aaa <- diag(10000000)
aaa <- diag(1000)
bbb <- diag(10000)
bbb <- diag(100000)
m10 <- diag(10)
View(m10)
m10 <- diag(100)
m10 <- diag(1000)
install.packages("pryr")
library(pryr)
object_size(diag(100))
m100 <- diag(100)
object_size(m100)
detach("package:pryr", unload=TRUE)
remove.packages("pryr")
m100 <- diag(100)
object.size(m100)
n <- 1000
mat <- matrix(1:n^2, nrow = n)
matsq <- mat %*% mat + 10 * diag(n)
system.time(solve(matsq))
n <- 1000
mat <- matrix(1:n^2, nrow = n)
matsq <- mat %*% mat + n * diag(n)
system.time(solve(matsq))
system.time(qr.solve(matsq, diag(n)))
system.time(solve(matsq))
system.time(qr.solve(matsq))
apply
lapply
.Internal
tapply
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
Rcpp::sourceCpp('Desktop/PhD3/Teaching/MiCM/MiCM/square_root.cpp')
Rcpp::sourceCpp('Desktop/PhD3/Teaching/MiCM/MiCM/mat_mul_cpp.cpp')
mat_mul(a, b)
dyn.load("mm_for.dll")
setwd("~/Desktop/PhD3/Teaching/MiCM/MiCM")
dyn.load("mm_for.dll")
dyn.load("mm_for.so")
a <- matrix(1:8, nrow = 2, byrow = T)
b <- matrix(1:12, nrow = 4, byrow = T)
a%*%b
mmf(a,b)
mmf <- function(A, B) {
ra <- nrow(A)
ca <- ncol(A)
rb <- nrow(B)
cb <- ncol(B)
if (ca == rb) {
result <- .Fortran("mat_mul_for",
A = as.double(A),
B = as.double(B),
AB = double(ra * cb),
RowA = as.integer(ra),
ColA = as.integer(ca),
RowB = as.integer(rb),
ColB = as.integer(cb),
RowAB = as.integer(ra),
ColAB = as.integer(cb)
)
mm <- matrix(result$AB, nrow = result$RowAB, byrow = F)
} else {
stop('non-conformable arguments')
}
return(list(Result = mm,
Dimension = c(result$RowAB, result$ColAB)
)
)
}
mmf(a, b)
a%*%b
setwd("C:/Users/shyderyl/Desktop/LY/MiCM")
dyn.load("mm_for.dll")
# Check whether the function is loaded
is.loaded("mat_mul_for")
mmf <- function(A, B) {
ra <- nrow(A)
ca <- ncol(A)
rb <- nrow(B)
cb <- ncol(B)
if (ca == rb) {
result <- .Fortran("mat_mul_for",
A = as.double(A),
B = as.double(B),
AB = double(ra * cb),
RowA = as.integer(ra),
ColA = as.integer(ca),
RowB = as.integer(rb),
ColB = as.integer(cb),
RowAB = as.integer(ra),
ColAB = as.integer(cb)
)
mm <- matrix(result$AB, nrow = result$RowAB, byrow = F)
} else {
stop('non-conformable arguments')
}
return(list(Result = mm,
Dimension = c(result$RowAB, result$ColAB)
)
)
}
set.seed(20190813)
ra <- 2
ca <- 4
rb <- 4
cb <- 3
A <- matrix(rnorm(ra*ca), nrow = ra)
B <- matrix(rnorm(rb*cb), nrow = rb)
A; B
mmf(A, B)
A %*% B
set.seed(20190813)
ra <- 2
ca <- 4
rb <- 5
cb <- 3
A <- matrix(rnorm(ra*ca), nrow = ra)
B <- matrix(rnorm(rb*cb), nrow = rb)
A; B
mmf(A, B)
A %*% B
set.seed(20190813)
ra <- 2
ca <- 4
rb <- 4
cb <- 3
A <- matrix(rnorm(ra*ca), nrow = ra)
B <- matrix(rnorm(rb*cb), nrow = rb)
A; B
mmf(A, B)
A %*% B
# setwd("")
# Set working directory
# It is easier to also put your .f90 and .dll in this directory.
dyn.load("mm_for.dll")
# Check whether the function is loaded
is.loaded("mat_mul_for")
mmf <- function(A, B) {
ra <- nrow(A)
ca <- ncol(A)
rb <- nrow(B)
cb <- ncol(B)
if (ca == rb) {
result <- .Fortran("mat_mul_for",
A = as.double(A),
B = as.double(B),
AB = double(ra * cb),
RowA = as.integer(ra),
ColA = as.integer(ca),
RowB = as.integer(rb),
ColB = as.integer(cb),
RowAB = as.integer(ra),
ColAB = as.integer(cb)
)
mm <- matrix(result$AB, nrow = result$RowAB, byrow = F)
} else {
stop('non-conformable arguments')
}
return(list(Result = mm,
Dimension = c(result$RowAB, result$ColAB)
)
)
}
set.seed(20190813)
ra <- 2
ca <- 4
rb <- 4
cb <- 3
A <- matrix(rnorm(ra*ca), nrow = ra)
B <- matrix(rnorm(rb*cb), nrow = rb)
A; B
mmf(A, B)
A %*% B
